{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PRESET_PLAYERS","name","ratio","SLIDER_MARKS","value","label","App","props","state","players","player","this","setState","playerSelect","map","Grid","key","item","Button","variant","onClick","handleAddPlayer","selectedPlayers","xs","Card","CardContent","Slider","defaultValue","marks","Container","Typography","align","container","justify","alignContent","alignItems","spacing","className","data-content","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXAKMA,EAAiB,CACrB,CAACC,KAAM,WAAYC,MAAO,IAC1B,CAACD,KAAM,OAAQC,MAAO,GACtB,CAACD,KAAM,OAAQC,MAAO,IACtB,CAACD,KAAM,OAAQC,MAAO,GACtB,CAACD,KAAM,iBAAkBC,MAAO,IAChC,CAACD,KAAM,KAAMC,MAAO,GACpB,CAACD,KAAM,MAAOC,MAAO,IACrB,CAACD,KAAM,OAAQC,MAAO,GACtB,CAACD,KAAM,MAAOC,MAAO,GACrB,CAACD,KAAM,QAASC,MAAO,IACvB,CAACD,KAAM,SAAUC,MAAO,GACxB,CAACD,KAAM,KAAMC,MAAO,KAGhBC,EAAe,CACnB,CACEC,MAAO,EACPC,MAAO,WAET,CACED,MAAO,IACPC,MAAO,SAwEIC,E,YAnEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAST,GAHM,E,6EAOHU,GACO,iBAAVA,GAAiC,QAAXA,EAC/BC,KAAKC,SAAS,CAAC,QAAU,GAAV,mBAAeD,KAAKH,MAAL,SAAf,CAAsC,CAACP,KAAM,SAAUC,MAAO,QACnD,iBAAVQ,GAChBC,KAAKC,SAAS,CAAC,QAAU,GAAV,mBAAeD,KAAKH,MAAL,SAAf,CAAsCE,Q,+BAI/C,IAAD,OACHG,EAAeb,EAAec,KAAI,SAAAJ,GAAM,OAC1C,kBAACK,EAAA,EAAD,CAAMC,IAAKN,EAAM,KAAUO,MAAI,GAC7B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAAS,kBAAM,EAAKC,gBAAgBX,KAC5DA,EAAM,UAKTY,EAAkBX,KAAKH,MAAL,QAAsBM,KAAI,SAAAJ,GAAM,OACpD,kBAACK,EAAA,EAAD,CAAMC,IAAKN,EAAM,KAAUO,MAAI,EAACM,GAAI,GAClC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGf,EAAM,KADT,KAEE,kBAACgB,EAAA,EAAD,CACEC,aAAgC,IAAlBjB,EAAM,MACpBkB,MAAOzB,UAQjB,OACE,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASZ,QAAQ,MAAnC,UACA,gDAEA,kBAACJ,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAQ,SAASC,aAAa,eAAeC,WAAW,UAAUC,QAAS,GACvFvB,GAEJ,wBAAIwB,UAAU,UAAUC,eAAa,OAErC,kBAACvB,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAQ,UACtB,kBAACf,EAAA,EAAD,CAAQC,QAAQ,aAAhB,wBAVJ,WAcE,kBAACJ,EAAA,EAAD,CAAMiB,WAAS,EAACE,aAAa,eAAeE,QAAS,GAClDd,Q,GAxDOiB,aCnBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46624344.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport { Container, Typography, Grid, Button, Card, CardContent, Slider } from '@material-ui/core';\r\n\r\nconst PRESET_PLAYERS = [\r\n  {name: 'tsunilly', ratio: 0.5},\r\n  {name: 'Lomi', ratio: 1.0}, \r\n  {name: 'Dale', ratio: 0.2}, \r\n  {name: 'Josh', ratio: 1.0}, \r\n  {name: 'Space Princess', ratio: 0.9}, \r\n  {name: 'Le', ratio: 0.0}, \r\n  {name: 'Joy', ratio: 0.7}, \r\n  {name: 'Bugs', ratio: 0.0}, \r\n  {name: 'Cal', ratio: 0.0},\r\n  {name: 'Jonie', ratio: 0.5},\r\n  {name: 'Kebodo', ratio: 1.0},\r\n  {name: 'JK', ratio: 0.5},\r\n]\r\n\r\nconst SLIDER_MARKS = [\r\n  {\r\n    value: 0,\r\n    label: 'Support'\r\n  },\r\n  {\r\n    value: 100,\r\n    label: 'Core'\r\n  }\r\n]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      players: PRESET_PLAYERS,\r\n    };\r\n  }\r\n\r\n  handleAddPlayer(player) {\r\n    if (typeof player == 'string' && player === 'new') {\r\n      this.setState({'players': [...this.state['players'], {name: 'Newbie', ratio: 0.5}]})\r\n    } else if (typeof player == 'object') {\r\n      this.setState({'players': [...this.state['players'], player]})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var playerSelect = PRESET_PLAYERS.map(player => \r\n      <Grid key={player['name']} item>\r\n        <Button variant=\"outlined\" onClick={() => this.handleAddPlayer(player)}>\r\n          {player['name']}\r\n        </Button>\r\n      </Grid>\r\n    );\r\n\r\n    var selectedPlayers = this.state['players'].map(player =>\r\n      <Grid key={player['name']} item xs={6}>\r\n        <Card>\r\n          <CardContent>\r\n            {player['name']} : \r\n            <Slider \r\n              defaultValue={player['ratio'] * 100} \r\n              marks={SLIDER_MARKS}\r\n            />\r\n\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n\r\n    return(\r\n      <Container>\r\n        <Typography align=\"center\" variant=\"h1\">Header</Typography>\r\n        <div>Select players:</div>\r\n\r\n        <Grid container justify=\"center\" alignContent=\"space-evenly\" alignItems=\"stretch\" spacing={1}>\r\n          { playerSelect }\r\n        </Grid>\r\n        <hr className=\"hr-text\" data-content=\"OR\"/>\r\n        \r\n        <Grid container justify=\"center\">\r\n          <Button variant=\"contained\">Add a Custom Player</Button>\r\n        </Grid>\r\n\r\n        players:\r\n        <Grid container alignContent=\"space-evenly\" spacing={2}>\r\n          {selectedPlayers}\r\n        </Grid>\r\n\r\n        \r\n  \r\n      </Container>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n  \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}